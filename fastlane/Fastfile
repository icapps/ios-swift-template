require 'colorize'

# Fix the fastlane version so that we don't get any surprises while deploying.
fastlane_version '2.12.0'

# Select the correct version of Xcode we want to build with on Jenkins.
xcode_select('/Applications/Xcode 8.2.app') if is_ci?

# Don't generate README files.
skip_docs

# Prepare Jenkins.
setup_jenkins

#####################
### CONFIGURATION ###
#####################

# Project configuration.
workspace = '_OLLIE_NAME_.xcworkspace'
project =   '_OLLIE_NAME_.xcodeproj'
scheme =    '_OLLIE_NAME_'

# Hockey configuration.
hockey_app_api_key = ENV['FL_HOCKEY_API_TOKEN']

# TestFlight configuration.
testflight_identifier = 'com.icapps._OLLIE_NAME_AS_DOMAIN_'

# Apteligent configuration.
apteligent_beta_app_id =            '123123123'
apteligent_beta_oauth_token =       '123123123'
apteligent_production_app_id =      '123123123'
apteligent_production_oauth_token = '123123123'

# Deployment configuration.
slack_room = '#jenkins'
changelog = File.read("../CHANGELOG.md") # manually add bullets with changes to this file

####################
### PUBLIC LANES ###
####################

# This lane is used for checking if your pull request's code is according to our
# coding guidelines and that the application's tests run.
lane :pr do
  # Check the coding guidelines.
  check_code_style
  # Run the tests.
  run_tests
  # Run the code coverage generation.
  run_coverage
end

# The beta lane deploys the appication to HockeyApp but prior to deploying there
# are some other tasks executed like updating translations, incrementing the
# build number...
lane :beta do
  # Messages about builds are chared with the team
  slack_room = '#_OLLIE_NAME_'
  # Make sure the brach is the beta branch.
  ensure_git_branch branch: 'beta'
  # Run the tests.
  run_tests
  # We reset the git repository because the tests could update some files.
  reset_git_repo force: true
  # We increment the build number without commiting.
  increment_build_number
  # Configuration of the translations importer can be found in the
  # `.translations` file in the root of the repository.
  update_translations
  # Badge the application icon.
  apply_badge_to_icon configuration: 'Beta'
  # Build the application with the given configuration.
  build(configuration: 'Beta', export_method: 'enterprise')
  # Upload the build to HockeyApp.
  upload_to_hockey
  # Upload the dSYM to Apteligent.
  upload_to_apteligent(
    oauth_token: apteligent_beta_oauth_token,
    app_id:      apteligent_beta_app_id
  )
  # When everything succeeeds, commit and push the changes.
  commit_tag_and_push
end

# The production lane deploys the appication to TestFlight but prior to deploying
# there are some other tasks executed like updating translations, incrementing the
# build number...
lane :production do
  # Messages about builds are chared with the team
  slack_room = '#_OLLIE_NAME_'
  # Make sure the brach is the master branch.
  ensure_git_branch branch: 'master'
  # Run the tests.
  run_tests
  # We reset the git repository because the tests could update some files.
  reset_git_repo force: true
  # We increment the build number without commiting.
  increment_build_number
  # Configuration of the translations importer can be found in the
  # `.translations` file in the root of the repository.
  update_translations
  # Build the application with the given configuration.
  build(configuration: 'Production'export_method: 'app-store')
  # Upload the build to TestFlight.
  upload_to_testflight
  # Upload the dSYM to Apteligent.
  upload_to_apteligent(
    oauth_token: apteligent_production_oauth_token,
    app_id:      apteligent_production_app_id
  )
  # When everything succeeeds, commit and push the changes.
  commit_tag_and_push
end

########################
### ðŸ”‘  PRIVATE LANES ###
########################

private_lane :check_code_style do
  # Check if the code is according to our coding guidelines.
  swiftlint(strict: true)
end

# Run the tests.
private_lane :run_tests do
  scan(
    workspace:     workspace,
    scheme:        scheme,
    clean:         true,
    configuration: 'Debug',
    device:        'iPad Air 2'
  )
end

# Create code coverage reports. We ignore some pods because otherwise we get an
# incorrect coverage overview.
private_lane :run_coverage do
  xcov(
    workspace:        workspace,
    scheme:           scheme,
    exclude_targets:  %w(
      Stella.framework
      Nimble.framework
      Quick.framework
    ).join(', ')
  )
end

# Commit the version bump and tag this commit. When this succeeds we push the
# changes to the origin.
private_lane :commit_tag_and_push do
  # Persist the git changes.
  commit_version_bump(
    force:     true,
    xcodeproj: project
  )
  add_git_tag
  push_to_git_remote
end

private_lane :apply_badge_to_icon do |options|
  # Fetch the version number from the configuration.
  version_number = get_version_number(xcodeproj: project)
  # Fetch the build number from the configuration.
  build_number = get_build_number(xcodeproj: project)
  # Apply the badge to the icon.
  badge(
    shield:   "#{options[:configuration]}-#{version_number}.#{build_number}-blue",
    no_badge: true,
    shield_no_resize: true
  )
end

# Build application
private_lane :build do |options|
  gym(
    workspace:            workspace,
    scheme:               scheme,
    configuration:        options[:configuration],
    export_method: options[:export_method]
  )
end

# Upload the build to HockeyApp and open it up for the given teams.
private_lane :upload_to_hockey do

  puts "ðŸŽ¯ changelog to hockey #{changelog}".green

  hockey(
    api_token:    hockey_app_api_key,
    status:       '2', # The status is available for download.
    release_type: '0', # We set the release type to be beta.
    notes: "#{changelog}" # By default this if fromatted as markdown
  )

end

# Upload the build to TestFlight.
private_lane :upload_to_testflight do
  pilot(
    app_identifier:  testflight_identifier,
    skip_submission: true # Don't automagically submit for review.
  )
end

# Upload the dSYM to Apteligent.
private_lane :upload_to_apteligent do |options|
  # Upload the dSYM to Apteligent, for more info go to the Readme file
  crittercism(
    oauth_token: options[:oauth_token],
    app_id:      options[:app_id]
  )
end

#################
### CALLBACKS ###
#################

# Post a notification to Slack every time a lane was successful.
after_all do |lane|
  next unless is_ci?

if lane == :beta then

  slack(
    channel:               slack_room,
    success:               true,
    default_payloads:      [
      :lane,
      :test_result,
      :git_branch,
      :git_author,
      :last_git_commit_message
    ],
    attachment_properties: {
      title: "#{_OLLIE_NAME_} beta",
      fields: [
          {
          title: "Hockey Link",
          value: "#{hockeyLink}",
          short: true
        },
        {
        title: "CHANGELOG",
        value: "#{changelog}",
        short: false
        }
        ]
      }
    }
  )
else

  slack(
    channel:               slack_room,
    success:               true,
    default_payloads:      [
      :lane,
      :test_result,
      :git_branch,
      :git_author,
      :last_git_commit_message
    ],
    attachment_properties: {
      title: '_OLLIE_NAME_'
    }
  )

end

  clean_build_artifacts

end

# When an error occurs we post a failure notification to Slack.
error do |lane, exception|
  next unless is_ci?

  slack(
    message:               exception.message,
    channel:               slack_room,
    success:               false,
    default_payloads:      [
      :lane,
      :test_result,
      :git_branch,
      :git_author,
      :last_git_commit_message
    ],
    attachment_properties: {
      title: '_OLLIE_NAME_'
    }
  )
  clean_build_artifacts
end
